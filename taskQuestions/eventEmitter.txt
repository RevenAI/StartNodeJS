Hereâ€™s a practical task to enhance your understanding and mastery of Event Emitters in Node.js:

### Task: Building a Simple Logger with Event Emitters

#### Objective:
Create a logging system that listens for different log events and processes them accordingly, allowing you to log messages of various levels (info, warning, error).

#### Steps:

1. **Create an `eventEmitter.js` file:**
   - Create a custom logger class that extends the `EventEmitter` class.
   - Define events for different log levels: `info`, `warn`, and `error`.
   - Each event should log messages to the console and to a separate file named according to the log level (e.g., `info.log`, `warn.log`, `error.log`).

2. **Implement the Logger:**
   - Create a method in your logger class that emits the appropriate event based on the log level.
   - For each log level, you can use the `logEvents` function you already created, but modify it to accept a log level as a parameter to determine which log file to write to.

3. **Setup Directory Structure:**
   - Ensure that the log files are stored in a dedicated `logs` directory.
   - Use `fsPromises` to create the directory if it does not exist.

4. **Testing the Logger:**
   - In your `index.js` file, instantiate the logger and emit different log messages (e.g., info, warn, error).
   - Use `setTimeout` to simulate logging at different times.

5. **Review the Log Files:**
   - Check the contents of each log file to ensure that the messages are being logged correctly based on their level.

### Example Structure:

**1. `eventEmitter.js`:**
```javascript
const EventEmitter = require('events');
const fs = require('fs').promises;
const path = require('path');
const { format } = require('date-fns');
const { v4: uuid } = require('uuid');

class Logger extends EventEmitter {
    constructor() {
        super();
        this.logDir = path.join(__dirname, 'logs');
    }

    async log(message, level) {
        const logItem = `${format(new Date(), 'ddMMyyyy\tHH:mm:ss')}\t${uuid()}\t${message}\n`;
        await this.emit(level, logItem);
    }

    init() {
        this.on('info', (message) => this.logEvents(message, 'info'));
        this.on('warn', (message) => this.logEvents(message, 'warn'));
        this.on('error', (message) => this.logEvents(message, 'error'));
    }

    async logEvents(message, level) {
        try {
            if (!fs.existsSync(this.logDir)) {
                await fs.mkdir(this.logDir, { recursive: true });
            }
            const logFile = path.join(this.logDir, `${level}.log`);
            await fs.appendFile(logFile, message);
            console.log(`Logged ${level}: ${message}`);
        } catch (err) {
            console.error(err);
        }
    }
}

module.exports = Logger;
```

**2. `index.js`:**
```javascript
const Logger = require('./eventEmitter');

const logger = new Logger();
logger.init();

setTimeout(() => {
    logger.log('This is an info message', 'info');
}, 1000);

setTimeout(() => {
    logger.log('This is a warning message', 'warn');
}, 2000);

setTimeout(() => {
    logger.log('This is an error message', 'error');
}, 3000);
```

### Expected Outcome:
- You should see log messages in the console for each log level.
- Each log message should be written to its corresponding log file in the `logs` directory.
- By completing this task, you'll gain hands-on experience with the EventEmitter class, asynchronous file operations, and organizing code for better maintainability.

Let me know if you need further clarification on any part!